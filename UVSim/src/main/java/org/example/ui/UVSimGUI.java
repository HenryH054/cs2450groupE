/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.example.ui;

import java.io.File;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import org.example.file.FileUtil;
import org.example.controller.AppController;

/**
 *
 * @author Damon Morgan
 */
public class UVSimGUI extends javax.swing.JFrame {
    private File selectedFile;
    private boolean reRun;
    private EditWindow editWindow;
    private AppController appController;
    
    /**
     * Creates new form UVSimGUI
     */
    public UVSimGUI(AppController appController, EditWindow editWindow) {
        this.appController = appController;
        this.editWindow = editWindow;
        selectedFile = null;
        reRun = false;
        initComponents();
        runProgramButton.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        loadProgramButton = new javax.swing.JButton();
        runProgramButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        loadProgramButton.setText("Load program");
        loadProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadProgramButtonActionPerformed(evt);
            }
        });

        runProgramButton.setText("Run program");
        runProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runProgramButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("UVSIM");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(loadProgramButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(runProgramButton, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadProgramButton)
                    .addComponent(runProgramButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadProgramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadProgramButtonActionPerformed
        // TODO add your handling code here:
        loadAndDisplayProgram();
    }//GEN-LAST:event_loadProgramButtonActionPerformed

    void runProgramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runProgramButtonActionPerformed
        // TODO add your handling code here:
        appController.getRunner().runProgram(reRun, selectedFile);
        reRun = true;
    }//GEN-LAST:event_runProgramButtonActionPerformed

     /**
     * Appends a message to the output area.
     *
     * @param message the message to append
     */
    public void appendOutput(String message) {
        outputArea.append(message + "\n");
    }

    /**
     * Displays the GUI.
     */
    public void createAndShowGUI() {
        JOptionPane.showMessageDialog(null, "Welcome to the UV Sim!\n" +
                "Click the Load program button to load a program file from your local machine.\n" +
                "Click the run program button to run the program from the file\n" +
                "When prompted enter a 4 digit instruction.\n\n");
        outputArea.setEditable(false);
        setContentPane(mainPanel);
        setTitle("UVSIM");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
        appendOutput("Welcome to UVSIM!\nA software simulator that interprets BasicML\n\n" +
                "Step 1: Click the \"Load Program\" button to load the program\n" +
                "Step 2: Click the \"Run Program\" button to run the program\n");
    }

    /**
     * Prompts the user for a four-digit instruction.
     *
     * @return the inputted instruction
     */
    public int getInputField() {
        String inputText = inputDialog();
        while (!inputText.matches("^[-]?\\d{6}$")) {
            inputText = inputDialog();
        }

        return Integer.parseInt(inputText);
    }

    /**
     * Opens an input dialog for the user to enter a four-digit instruction.
     *
     * @return the inputted instruction as a string
     */
    private static String inputDialog() {
        return JOptionPane.showInputDialog("Please enter a six-digit numerical value or instruction:\n" +
                "Insturction format: \"010132\"\n" +
                "Functional code: \"010\"\n" +
                "Address: \"132\" ");
    }

    /**
     * Writes instructions from a file to a List.
     */
    private File selectProgramFile() {
        File file;
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(mainPanel);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            return file;
        }
        return null;
    }

    /**
     * Loads a program from a file, displays its content, and enables the run button.
     */
    private void loadAndDisplayProgram() {
        outputArea.setText("Loading Program...");
        selectedFile = selectProgramFile();

        if (selectedFile == null) {
            appendOutput("No file selected.\n");
            return;
        }

        List<String> instructions;
        try {
            instructions = FileUtil.readFileAsStringList(selectedFile);
        } catch (RuntimeException e) {
            appendOutput("Error loading program: " + e.getMessage() + "\n");
            return;
        }

        String path = selectedFile.getAbsolutePath();
        editWindow.createAndShowEditWindow(path, instructions);
        runProgramButton.setEnabled(true);
        appendOutput("Program loaded successfully.\n");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadProgramButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton runProgramButton;
    // End of variables declaration//GEN-END:variables
}
