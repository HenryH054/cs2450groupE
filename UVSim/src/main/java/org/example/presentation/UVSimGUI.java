package org.example.presentation;

import org.example.business.CPU;

import javax.swing.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * UVSimGUI is the main graphical user interface for the UVSim application.
 * It allows users to load, run, and reset programs.
 *
 * @author Damon Morgan
 */
public class UVSimGUI extends javax.swing.JFrame {

    private CPU cpu;
    private File selectedFile;
    private boolean reRun;

    /**
     * Constructor for UVSimGUI
     */
    public UVSimGUI() {
        cpu = new CPU(this);
        selectedFile = null;
        reRun = false;
        initComponents();
        runProgramButton.setEnabled(false);
    }

    public void setCpu(CPU cpu) {
        this.cpu = cpu;
    }

    public JTextArea getOutputArea() {
        return outputArea;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        loadProgramButton = new javax.swing.JButton();
        runProgramButton = new javax.swing.JButton();
        resetProgramButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        // Change the main panel background to the specified dark green
        mainPanel.setBackground(new java.awt.Color(76, 114, 29)); // Dark green background #4C721D

        // Change the buttons' background to white
        loadProgramButton.setBackground(java.awt.Color.WHITE); // White background
        loadProgramButton.setText("Load Program");
        loadProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadProgramButtonActionPerformed(evt);
            }
        });

        runProgramButton.setBackground(java.awt.Color.WHITE); // White background
        runProgramButton.setText("Run Program");
        runProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runProgramButtonActionPerformed(evt);
            }
        });

        resetProgramButton.setBackground(java.awt.Color.WHITE); // White background
        resetProgramButton.setText("Reset Program");
        resetProgramButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetProgramButtonActionPerformed(evt);
            }
        });

        outputArea.setColumns(20);
        outputArea.setRows(5);
        outputArea.setName("outputArea");
        jScrollPane1.setViewportView(outputArea);

        // Change the label's text color to white for better contrast
        jLabel1.setForeground(java.awt.Color.WHITE); // White text color
        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel1.setText("    UVSIM");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(mainPanelLayout.createSequentialGroup().addContainerGap().addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane1).addGroup(mainPanelLayout.createSequentialGroup().addComponent(loadProgramButton).addGap(18, 18, 18).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(runProgramButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)).addGap(18, 18, 18).addComponent(resetProgramButton).addGap(0, 0, Short.MAX_VALUE))).addContainerGap()));
        mainPanelLayout.setVerticalGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(mainPanelLayout.createSequentialGroup().addContainerGap(12, Short.MAX_VALUE).addComponent(jLabel1).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(runProgramButton).addComponent(loadProgramButton).addComponent(resetProgramButton)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }

    void runProgramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runProgramButtonActionPerformed
        // TODO add your handling code here:
        runProgram();
    }//GEN-LAST:event_runProgramButtonActionPerformed

    void loadProgramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadProgramButtonActionPerformed
        // TODO add your handling code here:
        outputArea.setText("Loading Program...");
        loadProgram();
    }//GEN-LAST:event_loadProgramButtonActionPerformed

    void resetProgramButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetProgramButtonActionPerformed
        // TODO add your handling code here:
        resetProgram();
    }//GEN-LAST:event_resetProgramButtonActionPerformed

    /**
     * Appends a message to the output area.
     *
     * @param message the message to append
     */
    public void appendOutput(String message) {
        outputArea.append(message + "\n");
    }

    /**
     * Displays the GUI.
     */
    public void createAndShowGUI() {
        JOptionPane.showMessageDialog(null, "Welcome to the UV Sim!\n" +
                "Click the Load program button to load a program file from your local machine.\n" +
                "Click the run program button to run the program from the file\n" +
                "When prompted enter a 4 digit instruction.\n\n" +
                "To reset the simulator and run a new program, click the reset button");
        outputArea.setEditable(false);
        setContentPane(mainPanel);
        setTitle("UVSIM");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setVisible(true);
        appendOutput("Welcome to UVSIM!\nA software simulator that interprets BasicML\n\n" +
                "Step 1: Click the \"Load Program\" button to load the program\n" +
                "Step 2: Click the \"Run Program\" button to run the program\n" +
                "Step 3: Click the \"Reset Program\" button to reset the simulator\nand run a new program\n");
    }

    /**
     * Prompts the user for a four-digit instruction.
     *
     * @return the inputted instruction
     */
    public int getInputField() {
        String inputText = inputDialog();
        while (!inputText.matches("^[-]?\\d{4}$")) {
            inputText = inputDialog();
        }

        return Integer.parseInt(inputText);
    }

    /**
     * Opens an input dialog for the user to enter a four-digit instruction.
     *
     * @return the inputted instruction as a string
     */
    private static String inputDialog() {
        return JOptionPane.showInputDialog("Please enter a four-digit instruction:\n" +
                "- Use '-' for negative numbers\n" +
                "- Positive numbers do not need a sign");
    }

    /**
     * Loads a program from a file into memory.
     */
    private void loadProgram() {
        runProgramButton.setEnabled(true);
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(mainPanel);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            String path = selectedFile.getAbsolutePath();

            List<Integer> instructions = getInstructions(selectedFile);

            createAndShowEditWindow(path, instructions);

            appendOutput("Program loaded successfully.\n");
        }
    }

    /**
     * Writes the given instructions to memory from a list of Strings..
     *
     * @param instructions the list of instructions to write
     */
    public void writeToMemoryFromStringList(List<String> instructions) {
        for (int i = 0; i < 100 && i < instructions.size(); i++) {
            try {
                int instruction = Integer.parseInt(instructions.get(i));
                cpu.getMemory().setData(i, instruction);
            } catch (NumberFormatException e) {
                this.appendOutput("Invalid instruction:\n" +
                        instructions.get(i) + " is either too large or an incorrect input\nPlease enter a four digit number.");
            }
        }
    }

    /**
     * Writes the given instructions to memory from a list of integers.
     *
     * @param instructions the list of instructions to write
     */
    public void writeToMemoryFromIntegerList(List<Integer> instructions) {
        for (int i = 0; i < 100 && i < instructions.size(); i++) {
            int instruction = instructions.get(i);
            cpu.getMemory().setData(i, instruction);
        }
    }

    /**
     * Creates and shows the instruction window with the given file path and instructions.
     *
     * @param path the file path of the program
     * @param instructions the list of instructions
     */
    public void createAndShowEditWindow(String path, List<Integer> instructions) {
        EditWindow editWindow = new EditWindow(cpu);
        editWindow.setUvSimGUI(this);
        editWindow.setVisible(true);
        editWindow.setFilePath(path);
        editWindow.appendInstructions(instructions);
    }

    /**
     * Retrieves instructions from the specified file.
     *
     * @param file the file to read instructions from
     * @return the list of instructions
     */
    public List<Integer> getInstructions(File file) {
        List<Integer> instructions = new ArrayList<>();
        try (Scanner scnr = new Scanner(file)) {
            while (scnr.hasNext()) {
                if (scnr.hasNextInt()) {
                    instructions.add(scnr.nextInt());
                } else {
                    scnr.nextLine();
                }
            }
        } catch (Exception e) {
            appendOutput("Error reading instructions: " + e.getMessage() + "\n");
        }
        return instructions;
    }

    /**
     * Runs the loaded program.
     */
    private void runProgram() {
        System.out.println("reRun: " + reRun);
        if(reRun) {
            List<Integer> instructions = getInstructions(selectedFile);
            for (Integer instruction : instructions) {
                System.out.println("Instruction: " + instruction);
            }
            writeToMemoryFromIntegerList(instructions);
        }
        cpu.execute();
        appendOutput("Program executed.\n");
        reRun = true;
    }

    /**
     * Resets the simulator.
     */
    private void resetProgram() {
        cpu.getMemory().clear();
        cpu.reset();
        outputArea.setText("");
        appendOutput("Program reset.\n");
        reRun = false;
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadProgramButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton resetProgramButton;
    private javax.swing.JButton runProgramButton;
    // End of variables declaration
}
